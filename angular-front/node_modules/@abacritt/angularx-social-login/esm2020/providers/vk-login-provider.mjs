import { BaseLoginProvider } from '../entities/base-login-provider';
import { SocialUser } from '../entities/social-user';
export class VKLoginProvider extends BaseLoginProvider {
    constructor(clientId, initOptions = {
        fields: 'photo_max,contacts',
        version: '5.124',
    }) {
        super();
        this.clientId = clientId;
        this.initOptions = initOptions;
        this.VK_API_URL = '//vk.com/js/api/openapi.js';
        this.VK_API_GET_USER = 'users.get';
    }
    initialize() {
        return new Promise((resolve, reject) => {
            try {
                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {
                    VK.init({
                        apiId: this.clientId,
                    });
                    resolve();
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    getLoginStatus() {
        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));
    }
    signIn() {
        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));
    }
    signOut() {
        return new Promise((resolve, reject) => {
            VK.Auth.logout((response) => {
                resolve();
            });
        });
    }
    signInInternal(resolve, reject) {
        VK.Auth.login((loginResponse) => {
            if (loginResponse.status === 'connected') {
                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);
            }
        });
    }
    getUser(userId, token, resolve) {
        VK.Api.call(this.VK_API_GET_USER, {
            user_id: userId,
            fields: this.initOptions.fields,
            v: this.initOptions.version,
        }, (userResponse) => {
            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));
        });
    }
    getLoginStatusInternal(resolve, reject) {
        VK.Auth.getLoginStatus((loginResponse) => {
            if (loginResponse.status === 'connected') {
                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);
            }
        });
    }
    createUser(response) {
        const user = new SocialUser();
        user.id = response.id;
        user.name = `${response.first_name} ${response.last_name}`;
        user.photoUrl = response.photo_max;
        user.authToken = response.token;
        return user;
    }
}
VKLoginProvider.PROVIDER_ID = 'VK';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmstbG9naW4tcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9saWIvc3JjL3Byb3ZpZGVycy92ay1sb2dpbi1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFJckQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsaUJBQWlCO0lBQ3BELFlBQ1UsUUFBZ0IsRUFDaEIsY0FBbUI7UUFDekIsTUFBTSxFQUFFLG9CQUFvQjtRQUM1QixPQUFPLEVBQUUsT0FBTztLQUNqQjtRQUVELEtBQUssRUFBRSxDQUFDO1FBTkEsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixnQkFBVyxHQUFYLFdBQVcsQ0FHbEI7UUFPYyxlQUFVLEdBQUcsNEJBQTRCLENBQUM7UUFDMUMsb0JBQWUsR0FBRyxXQUFXLENBQUM7SUFML0MsQ0FBQztJQU9ELFVBQVU7UUFDUixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUk7Z0JBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FDYixlQUFlLENBQUMsV0FBVyxFQUMzQixJQUFJLENBQUMsVUFBVSxFQUNmLEdBQUcsRUFBRTtvQkFDSCxFQUFFLENBQUMsSUFBSSxDQUFDO3dCQUNOLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUTtxQkFDckIsQ0FBQyxDQUFDO29CQUVILE9BQU8sRUFBRSxDQUFDO2dCQUNaLENBQUMsQ0FDRixDQUFDO2FBQ0g7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDWixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDYjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGNBQWM7UUFDWixPQUFPLElBQUksT0FBTyxDQUFhLENBQUMsT0FBWSxFQUFFLE1BQVcsRUFBRSxFQUFFLENBQzNELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQzdDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sSUFBSSxPQUFPLENBQWEsQ0FBQyxPQUFZLEVBQUUsTUFBVyxFQUFFLEVBQUUsQ0FDM0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQ3JDLENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRTtnQkFDL0IsT0FBTyxFQUFFLENBQUM7WUFDWixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLGNBQWMsQ0FBQyxPQUFZLEVBQUUsTUFBVztRQUM5QyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWtCLEVBQUUsRUFBRTtZQUNuQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssV0FBVyxFQUFFO2dCQUN4QyxJQUFJLENBQUMsT0FBTyxDQUNWLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUN6QixhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFDekIsT0FBTyxDQUNSLENBQUM7YUFDSDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLE9BQU8sQ0FBQyxNQUFXLEVBQUUsS0FBVSxFQUFFLE9BQVk7UUFDbkQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQ1QsSUFBSSxDQUFDLGVBQWUsRUFDcEI7WUFDRSxPQUFPLEVBQUUsTUFBTTtZQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU07WUFDL0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTztTQUM1QixFQUNELENBQUMsWUFBaUIsRUFBRSxFQUFFO1lBQ3BCLE9BQU8sQ0FDTCxJQUFJLENBQUMsVUFBVSxDQUNiLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN2RCxDQUNGLENBQUM7UUFDSixDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxPQUFZLEVBQUUsTUFBVztRQUN0RCxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLGFBQWtCLEVBQUUsRUFBRTtZQUM1QyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssV0FBVyxFQUFFO2dCQUN4QyxJQUFJLENBQUMsT0FBTyxDQUNWLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUN6QixhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFDekIsT0FBTyxDQUNSLENBQUM7YUFDSDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLFVBQVUsQ0FBQyxRQUFhO1FBQzlCLE1BQU0sSUFBSSxHQUFlLElBQUksVUFBVSxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMzRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQ2hDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7QUE5RnNCLDJCQUFXLEdBQVcsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUxvZ2luUHJvdmlkZXIgfSBmcm9tICcuLi9lbnRpdGllcy9iYXNlLWxvZ2luLXByb3ZpZGVyJztcclxuaW1wb3J0IHsgU29jaWFsVXNlciB9IGZyb20gJy4uL2VudGl0aWVzL3NvY2lhbC11c2VyJztcclxuXHJcbmRlY2xhcmUgbGV0IFZLOiBhbnk7XHJcblxyXG5leHBvcnQgY2xhc3MgVktMb2dpblByb3ZpZGVyIGV4dGVuZHMgQmFzZUxvZ2luUHJvdmlkZXIge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBjbGllbnRJZDogc3RyaW5nLFxyXG4gICAgcHJpdmF0ZSBpbml0T3B0aW9uczogYW55ID0ge1xyXG4gICAgICBmaWVsZHM6ICdwaG90b19tYXgsY29udGFjdHMnLFxyXG4gICAgICB2ZXJzaW9uOiAnNS4xMjQnLFxyXG4gICAgfVxyXG4gICkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUFJPVklERVJfSUQ6IHN0cmluZyA9ICdWSyc7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgVktfQVBJX1VSTCA9ICcvL3ZrLmNvbS9qcy9hcGkvb3BlbmFwaS5qcyc7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBWS19BUElfR0VUX1VTRVIgPSAndXNlcnMuZ2V0JztcclxuXHJcbiAgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdGhpcy5sb2FkU2NyaXB0KFxyXG4gICAgICAgICAgVktMb2dpblByb3ZpZGVyLlBST1ZJREVSX0lELFxyXG4gICAgICAgICAgdGhpcy5WS19BUElfVVJMLFxyXG4gICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICBWSy5pbml0KHtcclxuICAgICAgICAgICAgICBhcGlJZDogdGhpcy5jbGllbnRJZCxcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0TG9naW5TdGF0dXMoKTogUHJvbWlzZTxTb2NpYWxVc2VyPiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8U29jaWFsVXNlcj4oKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+XHJcbiAgICAgIHRoaXMuZ2V0TG9naW5TdGF0dXNJbnRlcm5hbChyZXNvbHZlLCByZWplY3QpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2lnbkluKCk6IFByb21pc2U8U29jaWFsVXNlcj4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFNvY2lhbFVzZXI+KChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PlxyXG4gICAgICB0aGlzLnNpZ25JbkludGVybmFsKHJlc29sdmUsIHJlamVjdClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzaWduT3V0KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgVksuQXV0aC5sb2dvdXQoKHJlc3BvbnNlOiBhbnkpID0+IHtcclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNpZ25JbkludGVybmFsKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpIHtcclxuICAgIFZLLkF1dGgubG9naW4oKGxvZ2luUmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICBpZiAobG9naW5SZXNwb25zZS5zdGF0dXMgPT09ICdjb25uZWN0ZWQnKSB7XHJcbiAgICAgICAgdGhpcy5nZXRVc2VyKFxyXG4gICAgICAgICAgbG9naW5SZXNwb25zZS5zZXNzaW9uLm1pZCxcclxuICAgICAgICAgIGxvZ2luUmVzcG9uc2Uuc2Vzc2lvbi5zaWQsXHJcbiAgICAgICAgICByZXNvbHZlXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFVzZXIodXNlcklkOiBhbnksIHRva2VuOiBhbnksIHJlc29sdmU6IGFueSkge1xyXG4gICAgVksuQXBpLmNhbGwoXHJcbiAgICAgIHRoaXMuVktfQVBJX0dFVF9VU0VSLFxyXG4gICAgICB7XHJcbiAgICAgICAgdXNlcl9pZDogdXNlcklkLFxyXG4gICAgICAgIGZpZWxkczogdGhpcy5pbml0T3B0aW9ucy5maWVsZHMsXHJcbiAgICAgICAgdjogdGhpcy5pbml0T3B0aW9ucy52ZXJzaW9uLFxyXG4gICAgICB9LFxyXG4gICAgICAodXNlclJlc3BvbnNlOiBhbnkpID0+IHtcclxuICAgICAgICByZXNvbHZlKFxyXG4gICAgICAgICAgdGhpcy5jcmVhdGVVc2VyKFxyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LCB7IHRva2VuIH0sIHVzZXJSZXNwb25zZS5yZXNwb25zZVswXSlcclxuICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRMb2dpblN0YXR1c0ludGVybmFsKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpIHtcclxuICAgIFZLLkF1dGguZ2V0TG9naW5TdGF0dXMoKGxvZ2luUmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICBpZiAobG9naW5SZXNwb25zZS5zdGF0dXMgPT09ICdjb25uZWN0ZWQnKSB7XHJcbiAgICAgICAgdGhpcy5nZXRVc2VyKFxyXG4gICAgICAgICAgbG9naW5SZXNwb25zZS5zZXNzaW9uLm1pZCxcclxuICAgICAgICAgIGxvZ2luUmVzcG9uc2Uuc2Vzc2lvbi5zaWQsXHJcbiAgICAgICAgICByZXNvbHZlXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNyZWF0ZVVzZXIocmVzcG9uc2U6IGFueSk6IFNvY2lhbFVzZXIge1xyXG4gICAgY29uc3QgdXNlcjogU29jaWFsVXNlciA9IG5ldyBTb2NpYWxVc2VyKCk7XHJcbiAgICB1c2VyLmlkID0gcmVzcG9uc2UuaWQ7XHJcbiAgICB1c2VyLm5hbWUgPSBgJHtyZXNwb25zZS5maXJzdF9uYW1lfSAke3Jlc3BvbnNlLmxhc3RfbmFtZX1gO1xyXG4gICAgdXNlci5waG90b1VybCA9IHJlc3BvbnNlLnBob3RvX21heDtcclxuICAgIHVzZXIuYXV0aFRva2VuID0gcmVzcG9uc2UudG9rZW47XHJcbiAgICByZXR1cm4gdXNlcjtcclxuICB9XHJcbn1cclxuIl19